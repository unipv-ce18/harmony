version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.2.0
  aws-ecr: circleci/aws-ecr@6.9.1
  aws-s3: circleci/aws-s3@2.0.0

jobs:

  test-apiserver:
    docker:
      - image: circleci/python:3.8
        environment:
          FLASK_CONFIG: development
          MONGO_URI: mongodb://localhost:27017/harmony?authSource=admin
          MONGO_USERNAME: test_db_user
          MONGO_PASSWORD: test_db_pass
          MESSAGING_HOST: localhost
      - image: circleci/mongo:4.2.1
        environment:
          # The image creates our user in the admin DB
          MONGO_INITDB_ROOT_USERNAME: test_db_user
          MONGO_INITDB_ROOT_PASSWORD: test_db_pass
      - image: rabbitmq:3.8.2-alpine
    working_directory: ~/harmony/backend
    steps:
      - checkout:
          path: ~/harmony

      - restore_cache:
          key: dep-cache-apiserver-{{ .Branch }}-{{ checksum "common/requirements.txt"}}{{ checksum "apiserver/requirements.txt" }}

      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r apiserver/requirements.txt

      - save_cache:
          key: dep-cache-apiserver-{{ .Branch }}-{{ checksum "common/requirements.txt"}}{{ checksum "apiserver/requirements.txt" }}
          paths:
            - ./venv

      - run:
          name: Execute tests
          command: |
            . venv/bin/activate
            nose2 -v

  test-webapp:
    docker:
      - image: cimg/node:13.14.0
    parallelism: 2
    working_directory: ~/harmony/webapp
    steps:
      - checkout:
          path: ~/harmony

      - restore_cache:
          key: dep-cache-webapp-{{ .Branch }}-{{ checksum "yarn.lock" }}

      - run:
          name: Install dependencies
          command: yarn

      - save_cache:
          key: dep-cache-webapp-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules

      - run:
          name: Execute tests
          command: |
            TESTFILES=$(circleci tests glob "test/**/*.test.js" | circleci tests split --split-by=timings)
            yarn test --ci --runInBand $TESTFILES
          environment:
            JEST_JUNIT_OUTPUT_DIR: test-results/jest

      - store_test_results:
          path: test-results

  publish-images:
    docker:
      - image: circleci/python:3.8
        user: root  # See <https://github.com/CircleCI-Public/circleci-cli/issues/291>
    steps:
      - checkout

      - aws-cli/install

      - run:
          name: Configure the AWS client
          command: |
            aws configure set aws_access_key_id "$AWS_ECR_ACCESS_KEY"
            aws configure set aws_secret_access_key "$AWS_ECR_SECRET_KEY"
            aws configure set role_arn "$AWS_ECR_ROLE"
            aws configure set source_profile default

      - setup_remote_docker

      - run:
          name: Define image tags to push
          command: |
            COMMIT_HASH=${CIRCLE_SHA1:-$LOCALBUILD_COMMIT_HASH}
            echo IMAGE_TAGS=${COMMIT_HASH:0:7},latest >> $BASH_ENV

      # The following steps take as a default "account-url: AWS_ECR_ACCOUNT_URL"

      - aws-ecr/build-image:
          path: ./backend
          dockerfile: apiserver/Dockerfile
          repo: harmony/apiserver
          tag: "$IMAGE_TAGS"

      - aws-ecr/build-image:
          path: ./backend
          dockerfile: director/Dockerfile
          repo: harmony/director
          tag: "$IMAGE_TAGS"

      - aws-ecr/build-image:
          path: ./backend
          dockerfile: worker/Dockerfile
          repo: harmony/worker
          tag: "$IMAGE_TAGS"

      - aws-ecr/ecr-login:
          region: AWS_REGION

      - aws-ecr/push-image:
          repo: harmony/apiserver
          tag: "$IMAGE_TAGS"

      - aws-ecr/push-image:
          repo: harmony/director
          tag: "$IMAGE_TAGS"

      - aws-ecr/push-image:
          repo: harmony/worker
          tag: "$IMAGE_TAGS"

  publish-webapp:
    docker:
      - image: cimg/node:13.14.0
    working_directory: ~/harmony/webapp
    steps:
      - checkout:
          path: ~/harmony

      - restore_cache:
          key: dep-cache-webapp-{{ .Branch }}-{{ checksum "yarn.lock" }}

      - run:
          name: Install dependencies
          command: yarn

      - save_cache:
          key: dep-cache-webapp-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules

      - run:
          name: Build webapp
          command: yarn build
          environment:
            API_BASE_URL: https://api.hymusic.ga/api/v1
            PLAYER_SOCKET_URL: https://api.hymusic.ga/playback
            DOWNLOAD_SOCKET_URL: https://api.hymusic.ga/download

      - aws-s3/sync:
          arguments: |
            --acl bucket-owner-full-control \
            --delete
          aws-access-key-id: AWS_S3_ACCESS_KEY
          aws-secret-access-key: AWS_S3_SECRET_KEY
          aws-region: AWS_REGION
          from: ./dist
          to: $AWS_S3_BUCKET

workflows:
  version: 2
  main-workflow:
    jobs:
      - test-apiserver
      - test-webapp
      - publish-images:
          filters:
            branches:
              only:
                - staging
      - publish-webapp:
          filters:
            branches:
              only:
                - staging
